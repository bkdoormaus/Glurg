Glurg
================================================================================
Glurg extracts resources, like meshes and textures, from OpenGL call sequences.
Using certain heuristics, Glurg can also create so-called relationships between
resources to also generate things like animations.

Glurg is a weird way of saying 'OpenGL resource generator'. It probably means
other things, too.

Building
================================================================================
Currently, Glurg is in very early stages of development. Not much is done. See
'develop' branch for WIP progress.

Glurg's application logic is written in MoonScript. However, the native library,
libglurg, requires building using your platform's C++ compiler.

Glurg also depends on a patched glretrace (a tool from apitrace) for certain
features, such as dumping framebuffer contents.

libglurg
--------------------------------------------------------------------------------
To build libglurg, execute CMake using the provided CMakeLists.txt as usual. You
will need to provide some dependencies:

* [Assimp](https://github.com/assimp/assimp)
* [libpng](http://www.libpng.org/pub/png/libpng.html)
* [Sodium](https://github.com/jedisct1/libsodium)
* [Snappy](https://github.com/google/snappy)
* [GLM](https://github.com/g-truc/glm)
* [JsonCpp](https://github.com/open-source-parsers/jsoncpp)
* [Lua 5.1](https://www.lua.org/versions.html#5.1) or [LuaJIT](http://luajit.org/)
* [Sol](https://github.com/ThePhD/sol2/)

Glurg
--------------------------------------------------------------------------------
Glurg logic is written in MoonScript, and thus has the following dependency:

* [MoonScript](https://github.com/leafo/moonscript)

It can be installed via LuaRocks easily enough, if you have that.

glretrace
--------------------------------------------------------------------------------
In order to dump the state of many calls, a patched glretrace with such a
feature must be used with Glurg. The patch is located at misc/retrace_main.patch
and applies cleanly to the apitrace 7.1 tag.

Running
================================================================================
To run Glurg, use the provided shell script, 'glurg.sh'. It expects libglurg.so,
generated from the build step, to be located at 'bin/libglurg.so'.

Glurg requires two inputs: the trace file produced by apitrace and the heuristic
to run. Heuristics can also require options. For example, this command:

```
$ glurg --trace araxxor001.trace --heuristic GL3StaticModelHeuristic \
  --min-frame=1932 --max-frame=1932 \
  -o position=aVertexPosition -o normal=aVertexNormal -o texture=aTextureUV \
  -o output-dir=./models
```

...successfully extracted the various meshes from the game RuneScape 3, such
as the monster Araxxor:

![Araxxor](/misc/examples/game01.png?raw=true)

To view options available to heuristics, you should check the relevant source.
For example, the options in the example above are found in the
glurg.common.GL3StaticModelHeuristic constructor.

License
================================================================================
Glurg is licensed under the Mozilla Public License, version 2. See the file
'LICENSE' in the root directory, or visit <http://mozilla.org/MPL/2.0/>.

Copyright
================================================================================
Copyright 2016 [bk]door.maus

Remember... Feed your head, feed your head.
